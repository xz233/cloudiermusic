{"version":3,"sources":["consts.js","reducers/currentSongReducer.js","reducers/playlistReducer.js","reducers/index.js","store/index.js","Utils.js","actions/index.js","components/Header/index.js","components/Footer/index.js","views/Music Player/index.js","components/Playlist/index.js","App/App.js","serviceWorker.js","index.js"],"names":["constants","SET_SONG_DATA","SET_SONG_DURATION","SET_LYRICS_DATA","SET_PLAYLIST_DATA","FETCH_PLAYLIST_BEGIN","FETCH_PLAYLIST_FAILURE","SET_CURRENT_SONG_INDEX","SET_AUDIO_DATA","SET_PLAY_STATE","SHOW_PLAYLIST","initialState","song_name","undefined","artist_name","song_duration","song_album_art","song_audio_link","song_lyrics_data","song_lyrics_link","play","playlistData","loading","error","currentSongIndex","audioData","showPlaylist","reducer","combineReducers","song","state","action","type","consts","payload","playlist","store","createStore","applyMiddleware","thunk","Utils","response","ok","Error","status","getPlaylist","dispatch","fetch","credentials","method","then","handleErrors","res","json","songs","catch","fetchPlaylistFailure","currentSongData","data","author","albumart","audio","parseSongData","setLyricsData","setCurrentSongIndex","index","setPlayState","Header","togglePlaylist","props","setShowPlaylist","showPlaylistBool","this","showPlaylistBoolClass","id","className","onClick","Component","connect","Footer","handleTouchDrag","e","time","width","offsetX","totalTime","duration","document","querySelector","clientWidth","getBoundingClientRect","left","percent","parseInt","touches","clientX","style","paused","pause","currentTime","setState","seek","handleDrag","togglePlay","children","classList","contains","remove","add","bindKeysHandler","event","stopPropagation","preventDefault","keycode","keyCode","which","repeat","shuffle","nextSong","prevSong","addedTime","parseTime","minutes","seconds","setTotalTime","removeEventListener","console","log","setCurrentTime","setSongData","length","getNextNum","except","val","Math","random","Audio","setAudioData","timer","src","addEventListener","setInterval","clearInterval","window","prevProps","prevState","onTouchStart","onMouseDown","MusicPlayer","setIntervalFunction","updateLyricsOnTop","clearIntervalFunction","lyrics_elements","querySelectorAll","totalOnTop","set_once","forEach","element","thisTime","getAttribute","nextTime","centerize","getLyricsData","onTopElement","a","height","c","factor","top","parentNode","scrollTo","lyrics_content","push","key","data-time","line","lyrics","Playlist","searchSongs","query","currentTarget","value","toLowerCase","trim","textContent","includes","display","showPlaylistClass","songs_list","data-index","alt","playThisSong","placeholder","autoComplete","onKeyUp","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.js","sourcesContent":["const constants = {\r\n    SET_SONG_DATA: \"SET_SONG_DATA\",\r\n    SET_SONG_DURATION: \"SET_SONG_DURATION\",\r\n    SET_LYRICS_DATA: \"SET_LYRICS_DATA\",\r\n    SET_PLAYLIST_DATA: \"SET_PLAYLIST_DATA\",\r\n    FETCH_PLAYLIST_BEGIN: \"FETCH_PLAYLIST_BEGIN\",\r\n    FETCH_PLAYLIST_FAILURE: \"FETCH_PLAYLIST_FAILURE\",\r\n    SET_CURRENT_SONG_INDEX: \"SET_CURRENT_SONG_INDEX\",\r\n    SET_AUDIO_DATA: \"SET_AUDIO_DATA\",\r\n    SET_PLAY_STATE: \"SET_PLAY_STATE\",\r\n    SHOW_PLAYLIST: \"SHOW_PLAYLIST\"\r\n}\r\nexport default constants;","import consts from '../consts';\r\n\r\nconst initialState = {\r\n    song_name: undefined,\r\n    artist_name: undefined,\r\n    song_duration: undefined,\r\n    song_album_art: undefined,\r\n    song_audio_link: undefined,\r\n    song_lyrics_data: undefined,\r\n    song_lyrics_link: undefined,\r\n    play: false\r\n}\r\n\r\nexport default function setSongData(state=initialState,action){\r\n    switch(action.type){\r\n        case consts.SET_SONG_DATA:\r\n            return {\r\n                ...state,\r\n                song_name: action.payload.song_name,\r\n                artist_name: action.payload.artist_name,\r\n                song_album_art: action.payload.song_album_art,\r\n                song_lyrics_link: action.payload.song_lyrics_link,\r\n                song_audio_link: action.payload.song_audio_link\r\n            }\r\n        case consts.SET_SONG_DURATION:\r\n            return {\r\n                ...state,\r\n                song_duration: action.payload.song_duration\r\n            }\r\n        case consts.SET_LYRICS_DATA:\r\n            return {\r\n                ...state,\r\n                song_lyrics_data: action.payload.song_lyrics_data,\r\n            }\r\n        case consts.SET_PLAY_STATE:\r\n            return {\r\n                ...state,\r\n                play: action.payload.play\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","import consts from '../consts';\r\n\r\nconst initialState = {\r\n    playlistData: undefined,\r\n    loading: false,\r\n    error: null,\r\n    currentSongIndex: undefined,\r\n    audioData: undefined,\r\n    showPlaylist: false\r\n}\r\n\r\nexport default function setSongData(state=initialState,action){\r\n    switch(action.type){\r\n        case consts.FETCH_PLAYLIST_BEGIN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case consts.FETCH_PLAYLIST_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error\r\n            }\r\n        case consts.SET_PLAYLIST_DATA:\r\n            return {\r\n                ...state,\r\n                loading:false,\r\n                playlistData: action.payload.playlistData,\r\n                error: null\r\n            }\r\n        case consts.SET_CURRENT_SONG_INDEX:\r\n            return {\r\n                ...state,\r\n                currentSongIndex: action.payload.currentSongIndex\r\n            }\r\n        case consts.SET_AUDIO_DATA:\r\n            return {\r\n                ...state,\r\n                audioData: action.payload.audioData\r\n            }\r\n        case consts.SHOW_PLAYLIST:\r\n            return {\r\n                ...state,\r\n                showPlaylist: action.payload.showPlaylist\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport song from './currentSongReducer';\r\nimport playlist from './playlistReducer';\r\n\r\nconst reducer = combineReducers({\r\n    song, playlist\r\n});\r\n\r\nexport default reducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"../reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","export default class Utils{\r\n    static handleErrors(response){\r\n        if(!response.ok){\r\n            throw new Error(response.status)\r\n        }\r\n        return response;\r\n    }\r\n}","import consts from '../consts';\r\nimport Utils from '../Utils'\r\n\r\nexport const fetchPlaylistBegin = () => ({\r\n    type: consts.FETCH_PLAYLIST_BEGIN\r\n});\r\n\r\nexport const fetchPlaylistSuccess = playlistData => ({\r\n    type: consts.SET_PLAYLIST_DATA,\r\n    payload: { playlistData }\r\n});\r\n  \r\nexport const fetchPlaylistFailure = error => ({\r\n    type: consts.FETCH_PLAYLIST_FAILURE,\r\n    payload: { error }\r\n});\r\n\r\nexport function getPlaylist(){\r\n    return dispatch => {\r\n        dispatch(fetchPlaylistBegin());\r\n        return fetch('https://www.x2cn.org/cloudiermusic/playlist.json', {\r\n                credentials: 'omit',\r\n                method: \"GET\"\r\n            })\r\n            .then(Utils.handleErrors)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch(fetchPlaylistSuccess(json.songs));\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchPlaylistFailure(error));\r\n            });\r\n    };\r\n}\r\nexport const parseSongData = data => ({\r\n    type: consts.SET_SONG_DATA,\r\n    payload: {\r\n        song_name: data.song,\r\n        artist_name: data.author,\r\n        song_album_art: data.albumart,\r\n        song_lyrics_link: data.json,\r\n        song_audio_link: data.audio\r\n    }\r\n})\r\nexport function currentSongData(data){\r\n    return dispatch => {\r\n        dispatch(parseSongData(data));\r\n    }\r\n}\r\n\r\nexport const setLyricsData = song_lyrics_data => ({\r\n    type: consts.SET_LYRICS_DATA,\r\n    payload: { song_lyrics_data }\r\n});\r\n\r\nexport function getLyricsData(data){\r\n    return dispatch => {\r\n        dispatch(setLyricsData([{line:'Loading', time: 0}]));\r\n        return fetch(data, {\r\n                credentials: 'omit',\r\n                method: \"GET\"\r\n            })\r\n            .then(Utils.handleErrors)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch(setLyricsData(json.lyrics));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setLyricsData([{'line':'Unable to load lyrics'}]));\r\n            });\r\n    };\r\n}\r\nexport const setCurrentSongIndex = index => ({\r\n    type: consts.SET_CURRENT_SONG_INDEX,\r\n    payload: {\r\n        currentSongIndex: index\r\n    }\r\n})\r\nexport const setAudioData = audioData => ({\r\n    type: consts.SET_AUDIO_DATA,\r\n    payload: { audioData }\r\n})\r\n\r\nexport const setPlayState = play => ({\r\n    type: consts.SET_PLAY_STATE,\r\n    payload: { play }\r\n})\r\nexport const showPlaylist = showPlaylist => ({\r\n    type: consts.SHOW_PLAYLIST,\r\n    payload: { showPlaylist }\r\n})","import React, { Component } from 'react';\r\nimport './_style.scss';\r\nimport { connect } from 'react-redux';\r\nimport { showPlaylist } from '../../actions';\r\n\r\nclass Header extends Component{\r\n    togglePlaylist = () => {\r\n        let { setShowPlaylist, showPlaylistBool } = this.props;\r\n        setShowPlaylist(!showPlaylistBool);\r\n    }\r\n    render(){\r\n        let { song_name, artist_name, showPlaylistBool } = this.props;\r\n        let showPlaylistBoolClass = (showPlaylistBool)?\"hide\": \"\";\r\n        return (\r\n            <header>\r\n                <div id=\"top-bar\" className=\"flex vrtlCenter\">\r\n                    <button id=\"back\" onClick={this.togglePlaylist}><i className=\"fa fa-arrow-left\"></i></button>\r\n                    <div id=\"about-song\" className={`${showPlaylistBoolClass}`}>\r\n                        <h2 className=\"song-name\">{song_name}</h2>\r\n                        <h4 className=\"artist-name low-text-opacity\">{artist_name}</h4></div>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    song_name: state.song.song_name,\r\n    artist_name: state.song.artist_name,\r\n    showPlaylistBool: state.playlist.showPlaylist\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    setShowPlaylist: data => dispatch(showPlaylist(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, { Component } from 'react';\r\nimport './_style.scss';\r\nimport { connect } from 'react-redux';\r\nimport { currentSongData, setAudioData, setCurrentSongIndex, setPlayState, showPlaylist } from '../../actions';\r\n\r\nclass Footer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        let audio = new Audio();\r\n        props.setAudioData(audio);\r\n        this.state = {\r\n            totalTime: undefined,\r\n            currentTime: \"-:--\",\r\n            audio: audio,\r\n            timer: undefined,\r\n            percent: 0,\r\n            src: undefined,\r\n            play: false,\r\n            seek: false,\r\n            repeat: false,\r\n            shuffle: false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let audio = this.state.audio;\r\n        audio.addEventListener('playing',(e) => {\r\n            console.log(\"Audio is Playing\");\r\n            this.setState({\r\n                timer: setInterval(this.setCurrentTime,1000)\r\n            });\r\n        });\r\n        audio.addEventListener('pause',(e) => {\r\n            console.log(\"Audio is Paused\");\r\n            clearInterval(this.state.timer);\r\n        });\r\n        audio.addEventListener('loadeddata',(e) => {\r\n            console.log(\"Total Time is set!\");\r\n            this.setTotalTime();\r\n        });\r\n        audio.addEventListener('ended',(e) => {\r\n            console.log(\"Song ended!\");\r\n            this.nextSong();\r\n        });\r\n        window.addEventListener('mouseup', (e) => {\r\n            window.removeEventListener('mousemove', this.handleDrag);\r\n            if(this.state.play)\r\n                this.state.audio.play();\r\n            this.setState({\r\n                audio: audio,\r\n                seek: false\r\n            })\r\n        });\r\n        window.addEventListener('touchend', (e) => {\r\n            window.removeEventListener('touchmove', this.handleTouchDrag);\r\n            if(this.state.play)\r\n                this.state.audio.play();\r\n            this.setState({\r\n                audio: audio,\r\n                seek: false\r\n            })\r\n        });\r\n        window.addEventListener('keyup',this.bindKeysHandler);\r\n    }\r\n    componentDidUpdate(prevProps,prevState){\r\n        if(prevProps.song_audio_link !== this.props.song_audio_link){\r\n            console.log(\"Audio is Changed\");\r\n            let audio = this.state.audio;\r\n            audio.src = this.props.song_audio_link;\r\n            if(this.state.play){ audio.play(); }\r\n            this.setState({\r\n                totalTime: \"-:--\",\r\n                currentTime: \"0:00\",\r\n                percent: 0,\r\n                src: this.props.song_audio_link\r\n            });\r\n        }\r\n        if(this.state.play !== prevState.play){\r\n            this.props.setPlayState(this.state.play);\r\n        }\r\n        else if(this.state.play === prevState.play && this.state.play !== this.props.play){\r\n            this.togglePlay();\r\n        }\r\n    }\r\n    handleTouchDrag = (e) => {\r\n        let time,totalTime = this.state.audio.duration, width, offsetX;\r\n        let audio = this.state.audio;\r\n        width = document.querySelector('#progress-bar').clientWidth;\r\n        offsetX = document.querySelector('#progress-bar').getBoundingClientRect().left;\r\n        var percent = parseInt(e.touches[0].clientX-offsetX)/parseInt(width)*100;\r\n        time = parseInt(totalTime * (percent/100));\r\n        if(percent > 100) percent = 100;\r\n        document.querySelector('#progress').style.width = percent + \"%\";\r\n        if(!audio.paused)\r\n            audio.pause();\r\n        if(time >= totalTime)\r\n            audio.currentTime = totalTime-1;\r\n        else\r\n            audio.currentTime = time;\r\n        this.setState({\r\n            audio: audio,\r\n            seek: true\r\n        })\r\n    }\r\n    handleDrag = (e) => {\r\n        let time,totalTime = this.state.audio.duration, width, offsetX;\r\n        let audio = this.state.audio;\r\n        width = document.querySelector('#progress-bar').clientWidth;\r\n        offsetX = document.querySelector('#progress-bar').getBoundingClientRect().left;\r\n        var percent = parseInt(e.clientX-offsetX)/parseInt(width)*100;\r\n        time = parseInt(totalTime * (percent/100));\r\n        if(percent > 100) percent = 100;\r\n        document.querySelector('#progress').style.width = percent + \"%\";\r\n        if(!audio.paused)\r\n            audio.pause();\r\n        if(time >= totalTime)\r\n            audio.currentTime = totalTime-1;\r\n        else\r\n            audio.currentTime = time;\r\n        this.setState({\r\n            audio: audio,\r\n            seek: true\r\n        })\r\n    }\r\n    togglePlay = () => {\r\n        let e = document.querySelector('#menu #play');\r\n        if(e.children[0].classList.contains(\"fa-play\")){\r\n            e.children[0].classList.remove(\"fa-play\");\r\n            e.children[0].classList.add(\"fa-pause\");\r\n            this.state.audio.play();\r\n            this.setState({\r\n                play: true\r\n            });\r\n        }\r\n        else{\r\n            e.children[0].classList.remove(\"fa-pause\");\r\n            e.children[0].classList.add(\"fa-play\");\r\n            this.state.audio.pause();\r\n            this.setState({\r\n                play: false\r\n            });\r\n        }\r\n    }\r\n    bindKeysHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var keycode = (event.keyCode ? event.keyCode : event.which);\r\n        if(keycode === 32) {\r\n            this.togglePlay();\r\n        }\r\n        else if(keycode === 82) {\r\n            this.setState({repeat:!this.state.repeat});\r\n        }\r\n        else if(keycode === 83) {\r\n            this.setState({shuffle:!this.state.shuffle});\r\n        }\r\n        else if(keycode === 78) {\r\n            this.nextSong();\r\n        }\r\n        else if(keycode === 80) {\r\n            this.prevSong();\r\n        }\r\n        else if(keycode === 27) {\r\n            this.togglePlaylist();\r\n        }\r\n        else if(keycode === 39) {\r\n            let audio = this.state.audio;\r\n            let addedTime = ((audio.currentTime * 1000) + 5000)/1000;\r\n            if(addedTime >= audio.duration){\r\n                audio.currentTime = ((audio.duration*1000) - 1000) / 1000;\r\n            }\r\n            else{\r\n                audio.currentTime = addedTime;\r\n            }\r\n            this.setState({ audio: audio });\r\n        }\r\n        else if(keycode === 37) {\r\n            let audio = this.state.audio;\r\n            let addedTime = ((audio.currentTime * 1000) - 5000)/1000;\r\n            if(addedTime <= 0){\r\n                audio.currentTime = 0;\r\n            }\r\n            else{\r\n                audio.currentTime = addedTime;\r\n            }\r\n            this.setState({ audio: audio });\r\n        }\r\n    }\r\n    togglePlaylist = () => {\r\n        let { setShowPlaylist, showPlaylistBool } = this.props;\r\n        setShowPlaylist(!showPlaylistBool);\r\n    }\r\n    parseTime = (time) => {\r\n        let minutes = parseInt(time/60000);\r\n        var seconds = parseInt((time%60000)/1000);\r\n        if(seconds < 10){ seconds = `0${seconds}`; }\r\n        return `${minutes}:${seconds}`;\r\n    }\r\n    setTotalTime = () => {\r\n        this.setState({\r\n            totalTime: this.parseTime(parseInt(this.state.audio.duration*1000))\r\n        });\r\n        this.state.audio.removeEventListener('loadeddata',(e) => {\r\n            console.log(\"Total Time is set!\");\r\n            this.setTotalTime();\r\n        });\r\n    }\r\n    setCurrentTime = () => {\r\n        let { audio } = this.state;\r\n        this.setState({\r\n            currentTime: this.parseTime(parseInt(audio.currentTime*1000)),\r\n            percent: (audio.currentTime/audio.duration)*100\r\n        });\r\n    }\r\n    prevSong = () => {\r\n        let { playlistData, currentSongIndex, setCurrentSongIndex, setSongData } = this.props;\r\n        if(playlistData !== undefined && playlistData.length > 0){\r\n            let index = ((currentSongIndex-1+playlistData.length)%playlistData.length);\r\n            setCurrentSongIndex(index)\r\n            setSongData(playlistData[index]);\r\n        }\r\n    }\r\n    getNextNum = (shuffle,except) => {\r\n        while(shuffle){\r\n            let val = parseInt(Math.random()*100);\r\n            if((val%except) !== 0){\r\n                return val;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n    nextSong = () => {\r\n        let { playlistData, currentSongIndex, setCurrentSongIndex, setSongData } = this.props;\r\n        let { shuffle, repeat } = this.state;\r\n        if(playlistData !== undefined && playlistData.length > 0){\r\n            let next = this.getNextNum(shuffle, playlistData.length);\r\n            let index = ((currentSongIndex+next)%playlistData.length);\r\n            if((currentSongIndex+1) === playlistData.length && repeat === false){\r\n                this.setState({\r\n                    play:false\r\n                });\r\n            }\r\n            setCurrentSongIndex(index)\r\n            setSongData(playlistData[index]);\r\n        }\r\n    }\r\n    render(){\r\n        let { totalTime, currentTime, percent, repeat, shuffle } = this.state;\r\n        return (\r\n            <footer>\r\n                <div id=\"player\">\r\n                    <div id=\"bar\" className=\"flex vrtlCenter hrtlCenter\">\r\n                        <div id=\"currentTime\">{currentTime}</div>\r\n                        <div id=\"progress-bar\" onTouchStart={\r\n                            (e) => {\r\n                                e.stopPropagation();\r\n                                this.handleTouchDrag(e);\r\n                                window.addEventListener('touchmove', this.handleTouchDrag)\r\n                                }\r\n                            } onMouseDown={\r\n                            (e) => {\r\n                                e.stopPropagation();\r\n                                this.handleDrag(e);\r\n                                window.addEventListener('mousemove', this.handleDrag)\r\n                                }\r\n                            }>\r\n                            <div id=\"progress\" style={{width: `${percent}%`}}>\r\n                                <i id=\"progressButton\" className=\"fa fa-circle\" onTouchStart={\r\n                                    (e) => {\r\n                                        e.stopPropagation();\r\n                                        window.addEventListener('touchmove', this.handleTouchDrag)\r\n                                        }\r\n                                    } onMouseDown={\r\n                                    (e) => {\r\n                                        e.stopPropagation();\r\n                                        window.addEventListener('mousemove', this.handleDrag)\r\n                                        }\r\n                                    }></i>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"totalTime\">{(totalTime === undefined)?currentTime:totalTime}</div>\r\n                    </div>\r\n                    <div id=\"menu\">\r\n                        <button id=\"repeat\" className={(!repeat)?`off`:``} onClick={(e)=>this.setState({repeat:!repeat})}><i className=\"fa fa-repeat\"></i></button>\r\n                        <button id=\"prev\" onClick={this.prevSong}><i className=\"fa fa-step-backward\"></i></button>\r\n                        <button id=\"play\" onClick={(e) => this.togglePlay()}><i className=\"fa fa-play\"></i></button>\r\n                        <button id=\"next\" onClick={this.nextSong}><i className=\"fa fa-step-forward\"></i></button>\r\n                        <button id=\"shuffle\" className={(!shuffle)?`off`:``} onClick={(e)=>this.setState({shuffle:!shuffle})}><i className=\"fa fa-random\"></i></button>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    song_audio_link: state.song.song_audio_link,\r\n    currentSongIndex: state.playlist.currentSongIndex,\r\n    playlistData: state.playlist.playlistData,\r\n    play: state.song.play,\r\n    showPlaylistBool: state.playlist.showPlaylist\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setSongData: data => dispatch(currentSongData(data)),\r\n    setCurrentSongIndex: data => dispatch(setCurrentSongIndex(data)),\r\n    setAudioData: data => dispatch(setAudioData(data)),\r\n    setPlayState: data => dispatch(setPlayState(data)),\r\n    setShowPlaylist: data => dispatch(showPlaylist(data))\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Footer);","import React, { Component } from 'react';\r\nimport './_style.scss';\r\nimport { connect } from 'react-redux';\r\nimport { currentSongData, getLyricsData, setCurrentSongIndex } from '../../actions';\r\n\r\nclass MusicPlayer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        let { playlistData, setSongData, setCurrentSongIndex, song_name } = props;\r\n        if(playlistData !== undefined && playlistData.length > 0 && song_name === undefined){\r\n            let index = 0;\r\n            setCurrentSongIndex(index)\r\n            setSongData(playlistData[index]);\r\n        }\r\n        this.state = {\r\n            timer: undefined\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let audio = this.props.audioData;\r\n        if(audio === undefined) return;\r\n        else if(this.props.song_lyrics_link !== undefined){\r\n            audio.addEventListener('playing',this.setIntervalFunction);\r\n            audio.addEventListener('pause',this.clearIntervalFunction);\r\n            console.log(\"Lyrics Updated!\");\r\n            this.props.getLyricsData(this.props.song_lyrics_link);\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        let audio = this.props.audioData;\r\n        if(audio === undefined) return;\r\n        audio.removeEventListener('playing',this.setIntervalFunction);\r\n        audio.removeEventListener('pause',this.clearIntervalFunction);\r\n    }\r\n    setIntervalFunction = () => {\r\n        console.log(\"Lyrics Synchronization is resumed\");\r\n        this.setState({\r\n            timer: setInterval(this.updateLyricsOnTop,1000)\r\n        });\r\n    }\r\n    clearIntervalFunction = () => {\r\n        console.log(\"Lyrics Synchronization is paused\");\r\n        clearInterval(this.state.timer);\r\n    }\r\n    centerize() {\r\n        if(document.querySelectorAll(\".on-top\").length === 0) return;\r\n        let onTopElement = document.querySelector(\".on-top\");\r\n        var a = onTopElement.getBoundingClientRect().height;\r\n        var c = document.querySelector(\"#lyrics\").getBoundingClientRect().height;\r\n        var d = onTopElement.getBoundingClientRect().top - onTopElement.parentNode.getBoundingClientRect().top;\r\n        let factor = 1/3;\r\n        if(c < 200){\r\n            factor = 1/50;\r\n        }\r\n        var e = d + (a/2) - (c*factor);\r\n        if(e < 0) e = 0;\r\n        document.querySelector(\"#lyrics\").scrollTo(0,e);\r\n    }\r\n    updateLyricsOnTop = () => {\r\n        let lyrics_elements = document.querySelectorAll(\"#lyrics-content > h2\");\r\n        let totalOnTop = document.querySelectorAll(\"#lyrics-content > h2.on-top\");\r\n        let set_once = true;\r\n        try{\r\n            lyrics_elements.forEach((element,index) => {\r\n                if(index === 0){\r\n                    let thisTime = parseInt(element.getAttribute(\"data-time\"));\r\n                    let currentTime = parseInt(this.props.audioData.currentTime*1000);\r\n                    if(currentTime < thisTime){\r\n                        if(totalOnTop.length > 0){\r\n                            totalOnTop.forEach(e => {\r\n                                e.classList.remove(\"on-top\");\r\n                            });\r\n                        }\r\n                        throw new Error(\"No need to iterate further\");\r\n                    }\r\n                }\r\n                if(element.classList.contains(\"on-top\")){\r\n                    element.classList.remove(\"on-top\");\r\n                }\r\n                if((index+1)<lyrics_elements.length && set_once === true){\r\n                    let nextTime = parseInt(lyrics_elements[index+1].getAttribute(\"data-time\"));\r\n                    let currentTime = parseInt(this.props.audioData.currentTime*1000);\r\n                    if(currentTime<nextTime){\r\n                        if(!element.classList.contains(\"on-top\")){\r\n                            element.classList.add(\"on-top\");\r\n                            this.centerize();\r\n                            set_once = false;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                else if(element !== undefined && (index+1) === lyrics_elements.length){\r\n                    let nextTime = parseInt(lyrics_elements[index].getAttribute(\"data-time\"));\r\n                    let currentTime = parseInt(this.props.audioData.currentTime*1000);\r\n                    if(currentTime>=nextTime){\r\n                        if(!element.classList.contains(\"on-top\")){\r\n                            element.classList.add(\"on-top\");\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        catch(e){\r\n            return;\r\n        }\r\n    }\r\n    render(){\r\n        let { song_name, artist_name, song_lyrics_data } = this.props;\r\n        let lyrics_content = [];\r\n\r\n        if(song_lyrics_data !== undefined && song_lyrics_data.length > 0){\r\n            lyrics_content = [];\r\n            song_lyrics_data.forEach((element,index) => {\r\n                lyrics_content.push(<h2 key={index} data-time={element.time}>{element.line}</h2>);\r\n            });\r\n        }\r\n        return (\r\n            <>\r\n                <section>\r\n                    <div id=\"lyrics\">\r\n                        <h2 className=\"song-name\">{song_name}</h2>\r\n                        <h4 className=\"artist-name\">{artist_name}</h4>\r\n                        <div id=\"lyrics-content\">\r\n                            {lyrics_content}\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    playlistData: state.playlist.playlistData,\r\n    song_name: state.song.song_name,\r\n    artist_name: state.song.artist_name,\r\n    song_lyrics_link: state.song.song_lyrics_link,\r\n    song_lyrics_data: state.song.song_lyrics_data,\r\n    audioData: state.playlist.audioData\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setSongData: data => dispatch(currentSongData(data)),\r\n    getLyricsData: data => dispatch(getLyricsData(data)),\r\n    setCurrentSongIndex: data => dispatch(setCurrentSongIndex(data))\r\n})\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MusicPlayer);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport './_style.scss';\r\nimport { currentSongData, setCurrentSongIndex, setPlayState } from '../../actions';\r\n\r\nclass Playlist extends Component{\r\n    playThisSong(index){\r\n        let { setCurrentSongIndex, setSongData, currentSongIndex, setPlayState, play, playlistData } = this.props;\r\n        if(index !== currentSongIndex && play === false){\r\n            setPlayState(true);\r\n        }\r\n        else if(currentSongIndex === index){\r\n            setPlayState(!play);\r\n        }\r\n        setCurrentSongIndex(index)\r\n        setSongData(playlistData[index]);\r\n    }\r\n    searchSongs = (e) => {\r\n        let query = e.currentTarget.value.toLowerCase().trim();\r\n        document.querySelectorAll('.song-list-row').forEach(element=>{\r\n            if(element.textContent.toLowerCase().includes(query))\r\n                element.style.display = \"flex\";\r\n            else\r\n                element.style.display = \"none\";\r\n        });\r\n    }\r\n    render(){\r\n        let { playlistData, song_name, play, showPlaylist } = this.props;\r\n        let showPlaylistClass;\r\n        if(showPlaylist)\r\n            showPlaylistClass = \"show\";\r\n        else\r\n            showPlaylistClass = \"\";\r\n        let songs_list = [];\r\n        if(playlistData !== undefined && playlistData.length > 0){\r\n            songs_list = [];\r\n            playlistData.forEach((element,index) => {\r\n                songs_list.push(\r\n                    <div key={index} data-index={index} className=\"flex vrtlCenter hrtlCenter song-list-row\">\r\n                        <div className=\"album-art\">\r\n                            <img alt={element.song} src={element.albumart}/>\r\n                        </div>\r\n                        <div className=\"song-details\">\r\n                            <h2 className=\"song\">{element.song}</h2>\r\n                            <h4 className=\"artist\">{element.author}</h4>\r\n                        </div>\r\n                        <div className=\"options\" onClick={(e) => this.playThisSong(index)}>\r\n                            {(song_name === element.song && play) && (<i className=\"fa fa-pause\"></i>)}\r\n                            {(song_name !== element.song || !play) && (<i className=\"fa fa-play\"></i>)}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n        return (\r\n            <div id=\"playlist\" className={`${showPlaylistClass}`}>\r\n                <div id=\"label\">\r\n                    <h1>Playlist</h1>\r\n                    <input id=\"search\" type=\"text\" placeholder=\"&#xF002; Search from all songs\" autoComplete=\"off\" onKeyUp={(e) => {e.stopPropagation(); this.searchSongs(e);}}></input>\r\n                </div>\r\n                <div id=\"show-box\">\r\n                    <div id=\"show-list\">\r\n                        {(songs_list.length > 0) && (\r\n                            <div className=\"song-list\">\r\n                                {songs_list}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    playlistData: state.playlist.playlistData,\r\n    song_name: state.song.song_name,\r\n    currentSongIndex: state.playlist.currentSongIndex,\r\n    play: state.song.play,\r\n    showPlaylist: state.playlist.showPlaylist\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setSongData: data => dispatch(currentSongData(data)),\r\n    setCurrentSongIndex: data => dispatch(setCurrentSongIndex(data)),\r\n    setPlayState: data => dispatch(setPlayState(data))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Playlist);","import React, { Component } from 'react';\nimport './App.scss';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport MusicPlayer from '../views/Music Player';\nimport { getPlaylist } from '../actions';\nimport Playlist from '../components/Playlist';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    let { playlistData, loading, getPlaylist } = props;\n    if(playlistData === undefined && loading === false){\n      getPlaylist();\n    }\n  }\n  render() {\n    let { song_album_art } = this.props;\n    return (\n      <Router>\n        <img className=\"album-art-background\" alt=\"album-art-background\" src={song_album_art}/>\n        <Header/>\n        <Switch>\n          <Route exact path=\"/\" component={() => <MusicPlayer/>}/>\n        </Switch>\n        <Playlist/>\n        <Footer/>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  playlistData: state.playlist.playlistData,\n  loading: state.playlist.loading,\n  song_album_art: state.song.song_album_art\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getPlaylist: () => dispatch(getPlaylist()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store';\nimport App from './App/App';\nimport './sass/index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\nserviceWorker.unregister();"],"sourceRoot":""}